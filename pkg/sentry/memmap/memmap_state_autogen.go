// automatically generated by stateify.

package memmap

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (f *FileRange) StateTypeName() string {
	return "pkg/sentry/memmap.FileRange"
}

func (f *FileRange) StateFields() []string {
	return []string{
		"Start",
		"End",
	}
}

func (f *FileRange) beforeSave() {}

func (f *FileRange) StateSave(stateSinkObject state.Sink) {
	f.beforeSave()
	stateSinkObject.Save(0, &f.Start)
	stateSinkObject.Save(1, &f.End)
}

func (f *FileRange) afterLoad() {}

func (f *FileRange) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &f.Start)
	stateSourceObject.Load(1, &f.End)
}

func (m *MappableRange) StateTypeName() string {
	return "pkg/sentry/memmap.MappableRange"
}

func (m *MappableRange) StateFields() []string {
	return []string{
		"Start",
		"End",
	}
}

func (m *MappableRange) beforeSave() {}

func (m *MappableRange) StateSave(stateSinkObject state.Sink) {
	m.beforeSave()
	stateSinkObject.Save(0, &m.Start)
	stateSinkObject.Save(1, &m.End)
}

func (m *MappableRange) afterLoad() {}

func (m *MappableRange) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &m.Start)
	stateSourceObject.Load(1, &m.End)
}

func (m *MappingOfRange) StateTypeName() string {
	return "pkg/sentry/memmap.MappingOfRange"
}

func (m *MappingOfRange) StateFields() []string {
	return []string{
		"MappingSpace",
		"AddrRange",
		"Writable",
	}
}

func (m *MappingOfRange) beforeSave() {}

func (m *MappingOfRange) StateSave(stateSinkObject state.Sink) {
	m.beforeSave()
	stateSinkObject.Save(0, &m.MappingSpace)
	stateSinkObject.Save(1, &m.AddrRange)
	stateSinkObject.Save(2, &m.Writable)
}

func (m *MappingOfRange) afterLoad() {}

func (m *MappingOfRange) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &m.MappingSpace)
	stateSourceObject.Load(1, &m.AddrRange)
	stateSourceObject.Load(2, &m.Writable)
}

func init() {
	state.Register((*FileRange)(nil))
	state.Register((*MappableRange)(nil))
	state.Register((*MappingOfRange)(nil))
}
