// automatically generated by stateify.

package devpts

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (f *FilesystemType) StateTypeName() string {
	return "pkg/sentry/fsimpl/devpts.FilesystemType"
}

func (f *FilesystemType) StateFields() []string {
	return []string{}
}

func (f *FilesystemType) beforeSave() {}

func (f *FilesystemType) StateSave(stateSinkObject state.Sink) {
	f.beforeSave()
}

func (f *FilesystemType) afterLoad() {}

func (f *FilesystemType) StateLoad(stateSourceObject state.Source) {
}

func (f *filesystem) StateTypeName() string {
	return "pkg/sentry/fsimpl/devpts.filesystem"
}

func (f *filesystem) StateFields() []string {
	return []string{
		"Filesystem",
		"devMinor",
	}
}

func (f *filesystem) beforeSave() {}

func (f *filesystem) StateSave(stateSinkObject state.Sink) {
	f.beforeSave()
	stateSinkObject.Save(0, &f.Filesystem)
	stateSinkObject.Save(1, &f.devMinor)
}

func (f *filesystem) afterLoad() {}

func (f *filesystem) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &f.Filesystem)
	stateSourceObject.Load(1, &f.devMinor)
}

func (r *rootInode) StateTypeName() string {
	return "pkg/sentry/fsimpl/devpts.rootInode"
}

func (r *rootInode) StateFields() []string {
	return []string{
		"implStatFS",
		"AlwaysValid",
		"InodeAttrs",
		"InodeDirectoryNoNewChildren",
		"InodeNotSymlink",
		"OrderedChildren",
		"rootInodeRefs",
		"locks",
		"dentry",
		"master",
		"root",
		"replicas",
		"nextIdx",
	}
}

func (r *rootInode) beforeSave() {}

func (r *rootInode) StateSave(stateSinkObject state.Sink) {
	r.beforeSave()
	stateSinkObject.Save(0, &r.implStatFS)
	stateSinkObject.Save(1, &r.AlwaysValid)
	stateSinkObject.Save(2, &r.InodeAttrs)
	stateSinkObject.Save(3, &r.InodeDirectoryNoNewChildren)
	stateSinkObject.Save(4, &r.InodeNotSymlink)
	stateSinkObject.Save(5, &r.OrderedChildren)
	stateSinkObject.Save(6, &r.rootInodeRefs)
	stateSinkObject.Save(7, &r.locks)
	stateSinkObject.Save(8, &r.dentry)
	stateSinkObject.Save(9, &r.master)
	stateSinkObject.Save(10, &r.root)
	stateSinkObject.Save(11, &r.replicas)
	stateSinkObject.Save(12, &r.nextIdx)
}

func (r *rootInode) afterLoad() {}

func (r *rootInode) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &r.implStatFS)
	stateSourceObject.Load(1, &r.AlwaysValid)
	stateSourceObject.Load(2, &r.InodeAttrs)
	stateSourceObject.Load(3, &r.InodeDirectoryNoNewChildren)
	stateSourceObject.Load(4, &r.InodeNotSymlink)
	stateSourceObject.Load(5, &r.OrderedChildren)
	stateSourceObject.Load(6, &r.rootInodeRefs)
	stateSourceObject.Load(7, &r.locks)
	stateSourceObject.Load(8, &r.dentry)
	stateSourceObject.Load(9, &r.master)
	stateSourceObject.Load(10, &r.root)
	stateSourceObject.Load(11, &r.replicas)
	stateSourceObject.Load(12, &r.nextIdx)
}

func (i *implStatFS) StateTypeName() string {
	return "pkg/sentry/fsimpl/devpts.implStatFS"
}

func (i *implStatFS) StateFields() []string {
	return []string{}
}

func (i *implStatFS) beforeSave() {}

func (i *implStatFS) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
}

func (i *implStatFS) afterLoad() {}

func (i *implStatFS) StateLoad(stateSourceObject state.Source) {
}

func (l *lineDiscipline) StateTypeName() string {
	return "pkg/sentry/fsimpl/devpts.lineDiscipline"
}

func (l *lineDiscipline) StateFields() []string {
	return []string{
		"size",
		"inQueue",
		"outQueue",
		"termios",
		"column",
	}
}

func (l *lineDiscipline) beforeSave() {}

func (l *lineDiscipline) StateSave(stateSinkObject state.Sink) {
	l.beforeSave()
	if !state.IsZeroValue(&l.masterWaiter) {
		state.Failf("masterWaiter is %#v, expected zero", &l.masterWaiter)
	}
	if !state.IsZeroValue(&l.replicaWaiter) {
		state.Failf("replicaWaiter is %#v, expected zero", &l.replicaWaiter)
	}
	stateSinkObject.Save(0, &l.size)
	stateSinkObject.Save(1, &l.inQueue)
	stateSinkObject.Save(2, &l.outQueue)
	stateSinkObject.Save(3, &l.termios)
	stateSinkObject.Save(4, &l.column)
}

func (l *lineDiscipline) afterLoad() {}

func (l *lineDiscipline) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &l.size)
	stateSourceObject.Load(1, &l.inQueue)
	stateSourceObject.Load(2, &l.outQueue)
	stateSourceObject.Load(3, &l.termios)
	stateSourceObject.Load(4, &l.column)
}

func (o *outputQueueTransformer) StateTypeName() string {
	return "pkg/sentry/fsimpl/devpts.outputQueueTransformer"
}

func (o *outputQueueTransformer) StateFields() []string {
	return []string{}
}

func (o *outputQueueTransformer) beforeSave() {}

func (o *outputQueueTransformer) StateSave(stateSinkObject state.Sink) {
	o.beforeSave()
}

func (o *outputQueueTransformer) afterLoad() {}

func (o *outputQueueTransformer) StateLoad(stateSourceObject state.Source) {
}

func (i *inputQueueTransformer) StateTypeName() string {
	return "pkg/sentry/fsimpl/devpts.inputQueueTransformer"
}

func (i *inputQueueTransformer) StateFields() []string {
	return []string{}
}

func (i *inputQueueTransformer) beforeSave() {}

func (i *inputQueueTransformer) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
}

func (i *inputQueueTransformer) afterLoad() {}

func (i *inputQueueTransformer) StateLoad(stateSourceObject state.Source) {
}

func (m *masterInode) StateTypeName() string {
	return "pkg/sentry/fsimpl/devpts.masterInode"
}

func (m *masterInode) StateFields() []string {
	return []string{
		"implStatFS",
		"InodeAttrs",
		"InodeNoopRefCount",
		"InodeNotDirectory",
		"InodeNotSymlink",
		"locks",
		"dentry",
		"root",
	}
}

func (m *masterInode) beforeSave() {}

func (m *masterInode) StateSave(stateSinkObject state.Sink) {
	m.beforeSave()
	stateSinkObject.Save(0, &m.implStatFS)
	stateSinkObject.Save(1, &m.InodeAttrs)
	stateSinkObject.Save(2, &m.InodeNoopRefCount)
	stateSinkObject.Save(3, &m.InodeNotDirectory)
	stateSinkObject.Save(4, &m.InodeNotSymlink)
	stateSinkObject.Save(5, &m.locks)
	stateSinkObject.Save(6, &m.dentry)
	stateSinkObject.Save(7, &m.root)
}

func (m *masterInode) afterLoad() {}

func (m *masterInode) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &m.implStatFS)
	stateSourceObject.Load(1, &m.InodeAttrs)
	stateSourceObject.Load(2, &m.InodeNoopRefCount)
	stateSourceObject.Load(3, &m.InodeNotDirectory)
	stateSourceObject.Load(4, &m.InodeNotSymlink)
	stateSourceObject.Load(5, &m.locks)
	stateSourceObject.Load(6, &m.dentry)
	stateSourceObject.Load(7, &m.root)
}

func (m *masterFileDescription) StateTypeName() string {
	return "pkg/sentry/fsimpl/devpts.masterFileDescription"
}

func (m *masterFileDescription) StateFields() []string {
	return []string{
		"vfsfd",
		"FileDescriptionDefaultImpl",
		"LockFD",
		"inode",
		"t",
	}
}

func (m *masterFileDescription) beforeSave() {}

func (m *masterFileDescription) StateSave(stateSinkObject state.Sink) {
	m.beforeSave()
	stateSinkObject.Save(0, &m.vfsfd)
	stateSinkObject.Save(1, &m.FileDescriptionDefaultImpl)
	stateSinkObject.Save(2, &m.LockFD)
	stateSinkObject.Save(3, &m.inode)
	stateSinkObject.Save(4, &m.t)
}

func (m *masterFileDescription) afterLoad() {}

func (m *masterFileDescription) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &m.vfsfd)
	stateSourceObject.Load(1, &m.FileDescriptionDefaultImpl)
	stateSourceObject.Load(2, &m.LockFD)
	stateSourceObject.Load(3, &m.inode)
	stateSourceObject.Load(4, &m.t)
}

func (q *queue) StateTypeName() string {
	return "pkg/sentry/fsimpl/devpts.queue"
}

func (q *queue) StateFields() []string {
	return []string{
		"readBuf",
		"waitBuf",
		"waitBufLen",
		"readable",
		"transformer",
	}
}

func (q *queue) beforeSave() {}

func (q *queue) StateSave(stateSinkObject state.Sink) {
	q.beforeSave()
	stateSinkObject.Save(0, &q.readBuf)
	stateSinkObject.Save(1, &q.waitBuf)
	stateSinkObject.Save(2, &q.waitBufLen)
	stateSinkObject.Save(3, &q.readable)
	stateSinkObject.Save(4, &q.transformer)
}

func (q *queue) afterLoad() {}

func (q *queue) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &q.readBuf)
	stateSourceObject.Load(1, &q.waitBuf)
	stateSourceObject.Load(2, &q.waitBufLen)
	stateSourceObject.Load(3, &q.readable)
	stateSourceObject.Load(4, &q.transformer)
}

func (r *replicaInode) StateTypeName() string {
	return "pkg/sentry/fsimpl/devpts.replicaInode"
}

func (r *replicaInode) StateFields() []string {
	return []string{
		"implStatFS",
		"InodeAttrs",
		"InodeNoopRefCount",
		"InodeNotDirectory",
		"InodeNotSymlink",
		"locks",
		"dentry",
		"root",
		"t",
	}
}

func (r *replicaInode) beforeSave() {}

func (r *replicaInode) StateSave(stateSinkObject state.Sink) {
	r.beforeSave()
	stateSinkObject.Save(0, &r.implStatFS)
	stateSinkObject.Save(1, &r.InodeAttrs)
	stateSinkObject.Save(2, &r.InodeNoopRefCount)
	stateSinkObject.Save(3, &r.InodeNotDirectory)
	stateSinkObject.Save(4, &r.InodeNotSymlink)
	stateSinkObject.Save(5, &r.locks)
	stateSinkObject.Save(6, &r.dentry)
	stateSinkObject.Save(7, &r.root)
	stateSinkObject.Save(8, &r.t)
}

func (r *replicaInode) afterLoad() {}

func (r *replicaInode) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &r.implStatFS)
	stateSourceObject.Load(1, &r.InodeAttrs)
	stateSourceObject.Load(2, &r.InodeNoopRefCount)
	stateSourceObject.Load(3, &r.InodeNotDirectory)
	stateSourceObject.Load(4, &r.InodeNotSymlink)
	stateSourceObject.Load(5, &r.locks)
	stateSourceObject.Load(6, &r.dentry)
	stateSourceObject.Load(7, &r.root)
	stateSourceObject.Load(8, &r.t)
}

func (r *replicaFileDescription) StateTypeName() string {
	return "pkg/sentry/fsimpl/devpts.replicaFileDescription"
}

func (r *replicaFileDescription) StateFields() []string {
	return []string{
		"vfsfd",
		"FileDescriptionDefaultImpl",
		"LockFD",
		"inode",
	}
}

func (r *replicaFileDescription) beforeSave() {}

func (r *replicaFileDescription) StateSave(stateSinkObject state.Sink) {
	r.beforeSave()
	stateSinkObject.Save(0, &r.vfsfd)
	stateSinkObject.Save(1, &r.FileDescriptionDefaultImpl)
	stateSinkObject.Save(2, &r.LockFD)
	stateSinkObject.Save(3, &r.inode)
}

func (r *replicaFileDescription) afterLoad() {}

func (r *replicaFileDescription) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &r.vfsfd)
	stateSourceObject.Load(1, &r.FileDescriptionDefaultImpl)
	stateSourceObject.Load(2, &r.LockFD)
	stateSourceObject.Load(3, &r.inode)
}

func (r *rootInodeRefs) StateTypeName() string {
	return "pkg/sentry/fsimpl/devpts.rootInodeRefs"
}

func (r *rootInodeRefs) StateFields() []string {
	return []string{
		"refCount",
	}
}

func (r *rootInodeRefs) beforeSave() {}

func (r *rootInodeRefs) StateSave(stateSinkObject state.Sink) {
	r.beforeSave()
	stateSinkObject.Save(0, &r.refCount)
}

func (r *rootInodeRefs) afterLoad() {}

func (r *rootInodeRefs) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &r.refCount)
}

func (t *Terminal) StateTypeName() string {
	return "pkg/sentry/fsimpl/devpts.Terminal"
}

func (t *Terminal) StateFields() []string {
	return []string{
		"n",
		"ld",
		"masterKTTY",
		"replicaKTTY",
	}
}

func (t *Terminal) beforeSave() {}

func (t *Terminal) StateSave(stateSinkObject state.Sink) {
	t.beforeSave()
	stateSinkObject.Save(0, &t.n)
	stateSinkObject.Save(1, &t.ld)
	stateSinkObject.Save(2, &t.masterKTTY)
	stateSinkObject.Save(3, &t.replicaKTTY)
}

func (t *Terminal) afterLoad() {}

func (t *Terminal) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &t.n)
	stateSourceObject.Load(1, &t.ld)
	stateSourceObject.Load(2, &t.masterKTTY)
	stateSourceObject.Load(3, &t.replicaKTTY)
}

func init() {
	state.Register((*FilesystemType)(nil))
	state.Register((*filesystem)(nil))
	state.Register((*rootInode)(nil))
	state.Register((*implStatFS)(nil))
	state.Register((*lineDiscipline)(nil))
	state.Register((*outputQueueTransformer)(nil))
	state.Register((*inputQueueTransformer)(nil))
	state.Register((*masterInode)(nil))
	state.Register((*masterFileDescription)(nil))
	state.Register((*queue)(nil))
	state.Register((*replicaInode)(nil))
	state.Register((*replicaFileDescription)(nil))
	state.Register((*rootInodeRefs)(nil))
	state.Register((*Terminal)(nil))
}
