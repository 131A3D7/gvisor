// automatically generated by stateify.

package tmpfs

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (d *dentryList) StateTypeName() string {
	return "pkg/sentry/fsimpl/tmpfs.dentryList"
}

func (d *dentryList) StateFields() []string {
	return []string{
		"head",
		"tail",
	}
}

func (d *dentryList) beforeSave() {}

func (d *dentryList) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.head)
	stateSinkObject.Save(1, &d.tail)
}

func (d *dentryList) afterLoad() {}

func (d *dentryList) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.head)
	stateSourceObject.Load(1, &d.tail)
}

func (d *dentryEntry) StateTypeName() string {
	return "pkg/sentry/fsimpl/tmpfs.dentryEntry"
}

func (d *dentryEntry) StateFields() []string {
	return []string{
		"next",
		"prev",
	}
}

func (d *dentryEntry) beforeSave() {}

func (d *dentryEntry) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.next)
	stateSinkObject.Save(1, &d.prev)
}

func (d *dentryEntry) afterLoad() {}

func (d *dentryEntry) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.next)
	stateSourceObject.Load(1, &d.prev)
}

func (d *deviceFile) StateTypeName() string {
	return "pkg/sentry/fsimpl/tmpfs.deviceFile"
}

func (d *deviceFile) StateFields() []string {
	return []string{
		"inode",
		"kind",
		"major",
		"minor",
	}
}

func (d *deviceFile) beforeSave() {}

func (d *deviceFile) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.inode)
	stateSinkObject.Save(1, &d.kind)
	stateSinkObject.Save(2, &d.major)
	stateSinkObject.Save(3, &d.minor)
}

func (d *deviceFile) afterLoad() {}

func (d *deviceFile) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.inode)
	stateSourceObject.Load(1, &d.kind)
	stateSourceObject.Load(2, &d.major)
	stateSourceObject.Load(3, &d.minor)
}

func (d *directory) StateTypeName() string {
	return "pkg/sentry/fsimpl/tmpfs.directory"
}

func (d *directory) StateFields() []string {
	return []string{
		"dentry",
		"inode",
		"childMap",
		"numChildren",
		"childList",
	}
}

func (d *directory) beforeSave() {}

func (d *directory) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.dentry)
	stateSinkObject.Save(1, &d.inode)
	stateSinkObject.Save(2, &d.childMap)
	stateSinkObject.Save(3, &d.numChildren)
	stateSinkObject.Save(4, &d.childList)
}

func (d *directory) afterLoad() {}

func (d *directory) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.dentry)
	stateSourceObject.Load(1, &d.inode)
	stateSourceObject.Load(2, &d.childMap)
	stateSourceObject.Load(3, &d.numChildren)
	stateSourceObject.Load(4, &d.childList)
}

func (d *directoryFD) StateTypeName() string {
	return "pkg/sentry/fsimpl/tmpfs.directoryFD"
}

func (d *directoryFD) StateFields() []string {
	return []string{
		"fileDescription",
		"DirectoryFileDescriptionDefaultImpl",
		"iter",
		"off",
	}
}

func (d *directoryFD) beforeSave() {}

func (d *directoryFD) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.fileDescription)
	stateSinkObject.Save(1, &d.DirectoryFileDescriptionDefaultImpl)
	stateSinkObject.Save(2, &d.iter)
	stateSinkObject.Save(3, &d.off)
}

func (d *directoryFD) afterLoad() {}

func (d *directoryFD) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.fileDescription)
	stateSourceObject.Load(1, &d.DirectoryFileDescriptionDefaultImpl)
	stateSourceObject.Load(2, &d.iter)
	stateSourceObject.Load(3, &d.off)
}

func (i *inodeRefs) StateTypeName() string {
	return "pkg/sentry/fsimpl/tmpfs.inodeRefs"
}

func (i *inodeRefs) StateFields() []string {
	return []string{
		"refCount",
	}
}

func (i *inodeRefs) beforeSave() {}

func (i *inodeRefs) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
	stateSinkObject.Save(0, &i.refCount)
}

func (i *inodeRefs) afterLoad() {}

func (i *inodeRefs) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &i.refCount)
}

func (n *namedPipe) StateTypeName() string {
	return "pkg/sentry/fsimpl/tmpfs.namedPipe"
}

func (n *namedPipe) StateFields() []string {
	return []string{
		"inode",
		"pipe",
	}
}

func (n *namedPipe) beforeSave() {}

func (n *namedPipe) StateSave(stateSinkObject state.Sink) {
	n.beforeSave()
	stateSinkObject.Save(0, &n.inode)
	stateSinkObject.Save(1, &n.pipe)
}

func (n *namedPipe) afterLoad() {}

func (n *namedPipe) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &n.inode)
	stateSourceObject.Load(1, &n.pipe)
}

func (r *regularFile) StateTypeName() string {
	return "pkg/sentry/fsimpl/tmpfs.regularFile"
}

func (r *regularFile) StateFields() []string {
	return []string{
		"inode",
		"memFile",
		"memoryUsageKind",
		"mappings",
		"writableMappingPages",
		"data",
		"seals",
		"size",
	}
}

func (r *regularFile) beforeSave() {}

func (r *regularFile) StateSave(stateSinkObject state.Sink) {
	r.beforeSave()
	stateSinkObject.Save(0, &r.inode)
	stateSinkObject.Save(1, &r.memFile)
	stateSinkObject.Save(2, &r.memoryUsageKind)
	stateSinkObject.Save(3, &r.mappings)
	stateSinkObject.Save(4, &r.writableMappingPages)
	stateSinkObject.Save(5, &r.data)
	stateSinkObject.Save(6, &r.seals)
	stateSinkObject.Save(7, &r.size)
}

func (r *regularFile) afterLoad() {}

func (r *regularFile) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &r.inode)
	stateSourceObject.Load(1, &r.memFile)
	stateSourceObject.Load(2, &r.memoryUsageKind)
	stateSourceObject.Load(3, &r.mappings)
	stateSourceObject.Load(4, &r.writableMappingPages)
	stateSourceObject.Load(5, &r.data)
	stateSourceObject.Load(6, &r.seals)
	stateSourceObject.Load(7, &r.size)
}

func (r *regularFileFD) StateTypeName() string {
	return "pkg/sentry/fsimpl/tmpfs.regularFileFD"
}

func (r *regularFileFD) StateFields() []string {
	return []string{
		"fileDescription",
		"off",
	}
}

func (r *regularFileFD) beforeSave() {}

func (r *regularFileFD) StateSave(stateSinkObject state.Sink) {
	r.beforeSave()
	stateSinkObject.Save(0, &r.fileDescription)
	stateSinkObject.Save(1, &r.off)
}

func (r *regularFileFD) afterLoad() {}

func (r *regularFileFD) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &r.fileDescription)
	stateSourceObject.Load(1, &r.off)
}

func (s *socketFile) StateTypeName() string {
	return "pkg/sentry/fsimpl/tmpfs.socketFile"
}

func (s *socketFile) StateFields() []string {
	return []string{
		"inode",
		"ep",
	}
}

func (s *socketFile) beforeSave() {}

func (s *socketFile) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
	stateSinkObject.Save(0, &s.inode)
	stateSinkObject.Save(1, &s.ep)
}

func (s *socketFile) afterLoad() {}

func (s *socketFile) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &s.inode)
	stateSourceObject.Load(1, &s.ep)
}

func (s *symlink) StateTypeName() string {
	return "pkg/sentry/fsimpl/tmpfs.symlink"
}

func (s *symlink) StateFields() []string {
	return []string{
		"inode",
		"target",
	}
}

func (s *symlink) beforeSave() {}

func (s *symlink) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
	stateSinkObject.Save(0, &s.inode)
	stateSinkObject.Save(1, &s.target)
}

func (s *symlink) afterLoad() {}

func (s *symlink) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &s.inode)
	stateSourceObject.Load(1, &s.target)
}

func (f *FilesystemType) StateTypeName() string {
	return "pkg/sentry/fsimpl/tmpfs.FilesystemType"
}

func (f *FilesystemType) StateFields() []string {
	return []string{}
}

func (f *FilesystemType) beforeSave() {}

func (f *FilesystemType) StateSave(stateSinkObject state.Sink) {
	f.beforeSave()
}

func (f *FilesystemType) afterLoad() {}

func (f *FilesystemType) StateLoad(stateSourceObject state.Source) {
}

func (f *filesystem) StateTypeName() string {
	return "pkg/sentry/fsimpl/tmpfs.filesystem"
}

func (f *filesystem) StateFields() []string {
	return []string{
		"vfsfs",
		"memFile",
		"clock",
		"devMinor",
		"nextInoMinusOne",
	}
}

func (f *filesystem) beforeSave() {}

func (f *filesystem) StateSave(stateSinkObject state.Sink) {
	f.beforeSave()
	stateSinkObject.Save(0, &f.vfsfs)
	stateSinkObject.Save(1, &f.memFile)
	stateSinkObject.Save(2, &f.clock)
	stateSinkObject.Save(3, &f.devMinor)
	stateSinkObject.Save(4, &f.nextInoMinusOne)
}

func (f *filesystem) afterLoad() {}

func (f *filesystem) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &f.vfsfs)
	stateSourceObject.Load(1, &f.memFile)
	stateSourceObject.Load(2, &f.clock)
	stateSourceObject.Load(3, &f.devMinor)
	stateSourceObject.Load(4, &f.nextInoMinusOne)
}

func (f *FilesystemOpts) StateTypeName() string {
	return "pkg/sentry/fsimpl/tmpfs.FilesystemOpts"
}

func (f *FilesystemOpts) StateFields() []string {
	return []string{
		"RootFileType",
		"RootSymlinkTarget",
		"FilesystemType",
	}
}

func (f *FilesystemOpts) beforeSave() {}

func (f *FilesystemOpts) StateSave(stateSinkObject state.Sink) {
	f.beforeSave()
	stateSinkObject.Save(0, &f.RootFileType)
	stateSinkObject.Save(1, &f.RootSymlinkTarget)
	stateSinkObject.Save(2, &f.FilesystemType)
}

func (f *FilesystemOpts) afterLoad() {}

func (f *FilesystemOpts) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &f.RootFileType)
	stateSourceObject.Load(1, &f.RootSymlinkTarget)
	stateSourceObject.Load(2, &f.FilesystemType)
}

func (d *dentry) StateTypeName() string {
	return "pkg/sentry/fsimpl/tmpfs.dentry"
}

func (d *dentry) StateFields() []string {
	return []string{
		"vfsd",
		"parent",
		"name",
		"dentryEntry",
		"inode",
	}
}

func (d *dentry) beforeSave() {}

func (d *dentry) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.vfsd)
	stateSinkObject.Save(1, &d.parent)
	stateSinkObject.Save(2, &d.name)
	stateSinkObject.Save(3, &d.dentryEntry)
	stateSinkObject.Save(4, &d.inode)
}

func (d *dentry) afterLoad() {}

func (d *dentry) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.vfsd)
	stateSourceObject.Load(1, &d.parent)
	stateSourceObject.Load(2, &d.name)
	stateSourceObject.Load(3, &d.dentryEntry)
	stateSourceObject.Load(4, &d.inode)
}

func (i *inode) StateTypeName() string {
	return "pkg/sentry/fsimpl/tmpfs.inode"
}

func (i *inode) StateFields() []string {
	return []string{
		"fs",
		"refs",
		"xattrs",
		"mode",
		"nlink",
		"uid",
		"gid",
		"ino",
		"atime",
		"ctime",
		"mtime",
		"locks",
		"watches",
		"impl",
	}
}

func (i *inode) beforeSave() {}

func (i *inode) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
	stateSinkObject.Save(0, &i.fs)
	stateSinkObject.Save(1, &i.refs)
	stateSinkObject.Save(2, &i.xattrs)
	stateSinkObject.Save(3, &i.mode)
	stateSinkObject.Save(4, &i.nlink)
	stateSinkObject.Save(5, &i.uid)
	stateSinkObject.Save(6, &i.gid)
	stateSinkObject.Save(7, &i.ino)
	stateSinkObject.Save(8, &i.atime)
	stateSinkObject.Save(9, &i.ctime)
	stateSinkObject.Save(10, &i.mtime)
	stateSinkObject.Save(11, &i.locks)
	stateSinkObject.Save(12, &i.watches)
	stateSinkObject.Save(13, &i.impl)
}

func (i *inode) afterLoad() {}

func (i *inode) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &i.fs)
	stateSourceObject.Load(1, &i.refs)
	stateSourceObject.Load(2, &i.xattrs)
	stateSourceObject.Load(3, &i.mode)
	stateSourceObject.Load(4, &i.nlink)
	stateSourceObject.Load(5, &i.uid)
	stateSourceObject.Load(6, &i.gid)
	stateSourceObject.Load(7, &i.ino)
	stateSourceObject.Load(8, &i.atime)
	stateSourceObject.Load(9, &i.ctime)
	stateSourceObject.Load(10, &i.mtime)
	stateSourceObject.Load(11, &i.locks)
	stateSourceObject.Load(12, &i.watches)
	stateSourceObject.Load(13, &i.impl)
}

func (f *fileDescription) StateTypeName() string {
	return "pkg/sentry/fsimpl/tmpfs.fileDescription"
}

func (f *fileDescription) StateFields() []string {
	return []string{
		"vfsfd",
		"FileDescriptionDefaultImpl",
		"LockFD",
	}
}

func (f *fileDescription) beforeSave() {}

func (f *fileDescription) StateSave(stateSinkObject state.Sink) {
	f.beforeSave()
	stateSinkObject.Save(0, &f.vfsfd)
	stateSinkObject.Save(1, &f.FileDescriptionDefaultImpl)
	stateSinkObject.Save(2, &f.LockFD)
}

func (f *fileDescription) afterLoad() {}

func (f *fileDescription) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &f.vfsfd)
	stateSourceObject.Load(1, &f.FileDescriptionDefaultImpl)
	stateSourceObject.Load(2, &f.LockFD)
}

func init() {
	state.Register((*dentryList)(nil))
	state.Register((*dentryEntry)(nil))
	state.Register((*deviceFile)(nil))
	state.Register((*directory)(nil))
	state.Register((*directoryFD)(nil))
	state.Register((*inodeRefs)(nil))
	state.Register((*namedPipe)(nil))
	state.Register((*regularFile)(nil))
	state.Register((*regularFileFD)(nil))
	state.Register((*socketFile)(nil))
	state.Register((*symlink)(nil))
	state.Register((*FilesystemType)(nil))
	state.Register((*filesystem)(nil))
	state.Register((*FilesystemOpts)(nil))
	state.Register((*dentry)(nil))
	state.Register((*inode)(nil))
	state.Register((*fileDescription)(nil))
}
