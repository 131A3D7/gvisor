// automatically generated by stateify.

package systrap

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (l *subprocessList) StateTypeName() string {
	return "pkg/sentry/platform/systrap.subprocessList"
}

func (l *subprocessList) StateFields() []string {
	return []string{
		"head",
		"tail",
	}
}

func (l *subprocessList) beforeSave() {}

// +checklocksignore
func (l *subprocessList) StateSave(stateSinkObject state.Sink) {
	l.beforeSave()
	stateSinkObject.Save(0, &l.head)
	stateSinkObject.Save(1, &l.tail)
}

func (l *subprocessList) afterLoad() {}

// +checklocksignore
func (l *subprocessList) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &l.head)
	stateSourceObject.Load(1, &l.tail)
}

func (e *subprocessEntry) StateTypeName() string {
	return "pkg/sentry/platform/systrap.subprocessEntry"
}

func (e *subprocessEntry) StateFields() []string {
	return []string{
		"next",
		"prev",
	}
}

func (e *subprocessEntry) beforeSave() {}

// +checklocksignore
func (e *subprocessEntry) StateSave(stateSinkObject state.Sink) {
	e.beforeSave()
	stateSinkObject.Save(0, &e.next)
	stateSinkObject.Save(1, &e.prev)
}

func (e *subprocessEntry) afterLoad() {}

// +checklocksignore
func (e *subprocessEntry) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &e.next)
	stateSourceObject.Load(1, &e.prev)
}

func init() {
	state.Register((*subprocessList)(nil))
	state.Register((*subprocessEntry)(nil))
}
