// automatically generated by stateify.

package lock

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (l *Lock) StateTypeName() string {
	return "pkg/sentry/fs/lock.Lock"
}

func (l *Lock) StateFields() []string {
	return []string{
		"Readers",
		"Writer",
	}
}

func (l *Lock) beforeSave() {}

func (l *Lock) StateSave(stateSinkObject state.Sink) {
	l.beforeSave()
	stateSinkObject.Save(0, &l.Readers)
	stateSinkObject.Save(1, &l.Writer)
}

func (l *Lock) afterLoad() {}

func (l *Lock) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &l.Readers)
	stateSourceObject.Load(1, &l.Writer)
}

func (l *Locks) StateTypeName() string {
	return "pkg/sentry/fs/lock.Locks"
}

func (l *Locks) StateFields() []string {
	return []string{
		"locks",
	}
}

func (l *Locks) beforeSave() {}

func (l *Locks) StateSave(stateSinkObject state.Sink) {
	l.beforeSave()
	if !state.IsZeroValue(&l.blockedQueue) {
		state.Failf("blockedQueue is %#v, expected zero", &l.blockedQueue)
	}
	stateSinkObject.Save(0, &l.locks)
}

func (l *Locks) afterLoad() {}

func (l *Locks) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &l.locks)
}

func (l *LockRange) StateTypeName() string {
	return "pkg/sentry/fs/lock.LockRange"
}

func (l *LockRange) StateFields() []string {
	return []string{
		"Start",
		"End",
	}
}

func (l *LockRange) beforeSave() {}

func (l *LockRange) StateSave(stateSinkObject state.Sink) {
	l.beforeSave()
	stateSinkObject.Save(0, &l.Start)
	stateSinkObject.Save(1, &l.End)
}

func (l *LockRange) afterLoad() {}

func (l *LockRange) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &l.Start)
	stateSourceObject.Load(1, &l.End)
}

func (l *LockSet) StateTypeName() string {
	return "pkg/sentry/fs/lock.LockSet"
}

func (l *LockSet) StateFields() []string {
	return []string{
		"root",
	}
}

func (l *LockSet) beforeSave() {}

func (l *LockSet) StateSave(stateSinkObject state.Sink) {
	l.beforeSave()
	var rootValue *LockSegmentDataSlices = l.saveRoot()
	stateSinkObject.SaveValue(0, rootValue)
}

func (l *LockSet) afterLoad() {}

func (l *LockSet) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.LoadValue(0, new(*LockSegmentDataSlices), func(y interface{}) { l.loadRoot(y.(*LockSegmentDataSlices)) })
}

func (l *Locknode) StateTypeName() string {
	return "pkg/sentry/fs/lock.Locknode"
}

func (l *Locknode) StateFields() []string {
	return []string{
		"nrSegments",
		"parent",
		"parentIndex",
		"hasChildren",
		"maxGap",
		"keys",
		"values",
		"children",
	}
}

func (l *Locknode) beforeSave() {}

func (l *Locknode) StateSave(stateSinkObject state.Sink) {
	l.beforeSave()
	stateSinkObject.Save(0, &l.nrSegments)
	stateSinkObject.Save(1, &l.parent)
	stateSinkObject.Save(2, &l.parentIndex)
	stateSinkObject.Save(3, &l.hasChildren)
	stateSinkObject.Save(4, &l.maxGap)
	stateSinkObject.Save(5, &l.keys)
	stateSinkObject.Save(6, &l.values)
	stateSinkObject.Save(7, &l.children)
}

func (l *Locknode) afterLoad() {}

func (l *Locknode) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &l.nrSegments)
	stateSourceObject.Load(1, &l.parent)
	stateSourceObject.Load(2, &l.parentIndex)
	stateSourceObject.Load(3, &l.hasChildren)
	stateSourceObject.Load(4, &l.maxGap)
	stateSourceObject.Load(5, &l.keys)
	stateSourceObject.Load(6, &l.values)
	stateSourceObject.Load(7, &l.children)
}

func (l *LockSegmentDataSlices) StateTypeName() string {
	return "pkg/sentry/fs/lock.LockSegmentDataSlices"
}

func (l *LockSegmentDataSlices) StateFields() []string {
	return []string{
		"Start",
		"End",
		"Values",
	}
}

func (l *LockSegmentDataSlices) beforeSave() {}

func (l *LockSegmentDataSlices) StateSave(stateSinkObject state.Sink) {
	l.beforeSave()
	stateSinkObject.Save(0, &l.Start)
	stateSinkObject.Save(1, &l.End)
	stateSinkObject.Save(2, &l.Values)
}

func (l *LockSegmentDataSlices) afterLoad() {}

func (l *LockSegmentDataSlices) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &l.Start)
	stateSourceObject.Load(1, &l.End)
	stateSourceObject.Load(2, &l.Values)
}

func init() {
	state.Register((*Lock)(nil))
	state.Register((*Locks)(nil))
	state.Register((*LockRange)(nil))
	state.Register((*LockSet)(nil))
	state.Register((*Locknode)(nil))
	state.Register((*LockSegmentDataSlices)(nil))
}
