// automatically generated by stateify.

package tty

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (d *dirInodeOperations) StateTypeName() string {
	return "pkg/sentry/fs/tty.dirInodeOperations"
}

func (d *dirInodeOperations) StateFields() []string {
	return []string{
		"InodeSimpleAttributes",
		"msrc",
		"master",
		"replicas",
		"dentryMap",
		"next",
	}
}

func (d *dirInodeOperations) beforeSave() {}

func (d *dirInodeOperations) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.InodeSimpleAttributes)
	stateSinkObject.Save(1, &d.msrc)
	stateSinkObject.Save(2, &d.master)
	stateSinkObject.Save(3, &d.replicas)
	stateSinkObject.Save(4, &d.dentryMap)
	stateSinkObject.Save(5, &d.next)
}

func (d *dirInodeOperations) afterLoad() {}

func (d *dirInodeOperations) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.InodeSimpleAttributes)
	stateSourceObject.Load(1, &d.msrc)
	stateSourceObject.Load(2, &d.master)
	stateSourceObject.Load(3, &d.replicas)
	stateSourceObject.Load(4, &d.dentryMap)
	stateSourceObject.Load(5, &d.next)
}

func (d *dirFileOperations) StateTypeName() string {
	return "pkg/sentry/fs/tty.dirFileOperations"
}

func (d *dirFileOperations) StateFields() []string {
	return []string{
		"di",
		"dirCursor",
	}
}

func (d *dirFileOperations) beforeSave() {}

func (d *dirFileOperations) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.di)
	stateSinkObject.Save(1, &d.dirCursor)
}

func (d *dirFileOperations) afterLoad() {}

func (d *dirFileOperations) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.di)
	stateSourceObject.Load(1, &d.dirCursor)
}

func (f *filesystem) StateTypeName() string {
	return "pkg/sentry/fs/tty.filesystem"
}

func (f *filesystem) StateFields() []string {
	return []string{}
}

func (f *filesystem) beforeSave() {}

func (f *filesystem) StateSave(stateSinkObject state.Sink) {
	f.beforeSave()
}

func (f *filesystem) afterLoad() {}

func (f *filesystem) StateLoad(stateSourceObject state.Source) {
}

func (s *superOperations) StateTypeName() string {
	return "pkg/sentry/fs/tty.superOperations"
}

func (s *superOperations) StateFields() []string {
	return []string{}
}

func (s *superOperations) beforeSave() {}

func (s *superOperations) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
}

func (s *superOperations) afterLoad() {}

func (s *superOperations) StateLoad(stateSourceObject state.Source) {
}

func (l *lineDiscipline) StateTypeName() string {
	return "pkg/sentry/fs/tty.lineDiscipline"
}

func (l *lineDiscipline) StateFields() []string {
	return []string{
		"size",
		"inQueue",
		"outQueue",
		"termios",
		"column",
	}
}

func (l *lineDiscipline) beforeSave() {}

func (l *lineDiscipline) StateSave(stateSinkObject state.Sink) {
	l.beforeSave()
	if !state.IsZeroValue(&l.masterWaiter) {
		state.Failf("masterWaiter is %#v, expected zero", &l.masterWaiter)
	}
	if !state.IsZeroValue(&l.replicaWaiter) {
		state.Failf("replicaWaiter is %#v, expected zero", &l.replicaWaiter)
	}
	stateSinkObject.Save(0, &l.size)
	stateSinkObject.Save(1, &l.inQueue)
	stateSinkObject.Save(2, &l.outQueue)
	stateSinkObject.Save(3, &l.termios)
	stateSinkObject.Save(4, &l.column)
}

func (l *lineDiscipline) afterLoad() {}

func (l *lineDiscipline) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &l.size)
	stateSourceObject.Load(1, &l.inQueue)
	stateSourceObject.Load(2, &l.outQueue)
	stateSourceObject.Load(3, &l.termios)
	stateSourceObject.Load(4, &l.column)
}

func (o *outputQueueTransformer) StateTypeName() string {
	return "pkg/sentry/fs/tty.outputQueueTransformer"
}

func (o *outputQueueTransformer) StateFields() []string {
	return []string{}
}

func (o *outputQueueTransformer) beforeSave() {}

func (o *outputQueueTransformer) StateSave(stateSinkObject state.Sink) {
	o.beforeSave()
}

func (o *outputQueueTransformer) afterLoad() {}

func (o *outputQueueTransformer) StateLoad(stateSourceObject state.Source) {
}

func (i *inputQueueTransformer) StateTypeName() string {
	return "pkg/sentry/fs/tty.inputQueueTransformer"
}

func (i *inputQueueTransformer) StateFields() []string {
	return []string{}
}

func (i *inputQueueTransformer) beforeSave() {}

func (i *inputQueueTransformer) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
}

func (i *inputQueueTransformer) afterLoad() {}

func (i *inputQueueTransformer) StateLoad(stateSourceObject state.Source) {
}

func (m *masterInodeOperations) StateTypeName() string {
	return "pkg/sentry/fs/tty.masterInodeOperations"
}

func (m *masterInodeOperations) StateFields() []string {
	return []string{
		"SimpleFileInode",
		"d",
	}
}

func (m *masterInodeOperations) beforeSave() {}

func (m *masterInodeOperations) StateSave(stateSinkObject state.Sink) {
	m.beforeSave()
	stateSinkObject.Save(0, &m.SimpleFileInode)
	stateSinkObject.Save(1, &m.d)
}

func (m *masterInodeOperations) afterLoad() {}

func (m *masterInodeOperations) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &m.SimpleFileInode)
	stateSourceObject.Load(1, &m.d)
}

func (m *masterFileOperations) StateTypeName() string {
	return "pkg/sentry/fs/tty.masterFileOperations"
}

func (m *masterFileOperations) StateFields() []string {
	return []string{
		"d",
		"t",
	}
}

func (m *masterFileOperations) beforeSave() {}

func (m *masterFileOperations) StateSave(stateSinkObject state.Sink) {
	m.beforeSave()
	stateSinkObject.Save(0, &m.d)
	stateSinkObject.Save(1, &m.t)
}

func (m *masterFileOperations) afterLoad() {}

func (m *masterFileOperations) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &m.d)
	stateSourceObject.Load(1, &m.t)
}

func (q *queue) StateTypeName() string {
	return "pkg/sentry/fs/tty.queue"
}

func (q *queue) StateFields() []string {
	return []string{
		"readBuf",
		"waitBuf",
		"waitBufLen",
		"readable",
		"transformer",
	}
}

func (q *queue) beforeSave() {}

func (q *queue) StateSave(stateSinkObject state.Sink) {
	q.beforeSave()
	stateSinkObject.Save(0, &q.readBuf)
	stateSinkObject.Save(1, &q.waitBuf)
	stateSinkObject.Save(2, &q.waitBufLen)
	stateSinkObject.Save(3, &q.readable)
	stateSinkObject.Save(4, &q.transformer)
}

func (q *queue) afterLoad() {}

func (q *queue) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &q.readBuf)
	stateSourceObject.Load(1, &q.waitBuf)
	stateSourceObject.Load(2, &q.waitBufLen)
	stateSourceObject.Load(3, &q.readable)
	stateSourceObject.Load(4, &q.transformer)
}

func (r *replicaInodeOperations) StateTypeName() string {
	return "pkg/sentry/fs/tty.replicaInodeOperations"
}

func (r *replicaInodeOperations) StateFields() []string {
	return []string{
		"SimpleFileInode",
		"d",
		"t",
	}
}

func (r *replicaInodeOperations) beforeSave() {}

func (r *replicaInodeOperations) StateSave(stateSinkObject state.Sink) {
	r.beforeSave()
	stateSinkObject.Save(0, &r.SimpleFileInode)
	stateSinkObject.Save(1, &r.d)
	stateSinkObject.Save(2, &r.t)
}

func (r *replicaInodeOperations) afterLoad() {}

func (r *replicaInodeOperations) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &r.SimpleFileInode)
	stateSourceObject.Load(1, &r.d)
	stateSourceObject.Load(2, &r.t)
}

func (r *replicaFileOperations) StateTypeName() string {
	return "pkg/sentry/fs/tty.replicaFileOperations"
}

func (r *replicaFileOperations) StateFields() []string {
	return []string{
		"si",
	}
}

func (r *replicaFileOperations) beforeSave() {}

func (r *replicaFileOperations) StateSave(stateSinkObject state.Sink) {
	r.beforeSave()
	stateSinkObject.Save(0, &r.si)
}

func (r *replicaFileOperations) afterLoad() {}

func (r *replicaFileOperations) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &r.si)
}

func (t *Terminal) StateTypeName() string {
	return "pkg/sentry/fs/tty.Terminal"
}

func (t *Terminal) StateFields() []string {
	return []string{
		"AtomicRefCount",
		"n",
		"d",
		"ld",
		"masterKTTY",
		"replicaKTTY",
	}
}

func (t *Terminal) beforeSave() {}

func (t *Terminal) StateSave(stateSinkObject state.Sink) {
	t.beforeSave()
	stateSinkObject.Save(0, &t.AtomicRefCount)
	stateSinkObject.Save(1, &t.n)
	stateSinkObject.Save(2, &t.d)
	stateSinkObject.Save(3, &t.ld)
	stateSinkObject.Save(4, &t.masterKTTY)
	stateSinkObject.Save(5, &t.replicaKTTY)
}

func (t *Terminal) afterLoad() {}

func (t *Terminal) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &t.AtomicRefCount)
	stateSourceObject.Load(1, &t.n)
	stateSourceObject.Load(2, &t.d)
	stateSourceObject.Load(3, &t.ld)
	stateSourceObject.Load(4, &t.masterKTTY)
	stateSourceObject.Load(5, &t.replicaKTTY)
}

func init() {
	state.Register((*dirInodeOperations)(nil))
	state.Register((*dirFileOperations)(nil))
	state.Register((*filesystem)(nil))
	state.Register((*superOperations)(nil))
	state.Register((*lineDiscipline)(nil))
	state.Register((*outputQueueTransformer)(nil))
	state.Register((*inputQueueTransformer)(nil))
	state.Register((*masterInodeOperations)(nil))
	state.Register((*masterFileOperations)(nil))
	state.Register((*queue)(nil))
	state.Register((*replicaInodeOperations)(nil))
	state.Register((*replicaFileOperations)(nil))
	state.Register((*Terminal)(nil))
}
