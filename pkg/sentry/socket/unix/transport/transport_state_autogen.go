// automatically generated by stateify.

package transport

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (c *connectionedEndpoint) StateTypeName() string {
	return "pkg/sentry/socket/unix/transport.connectionedEndpoint"
}

func (c *connectionedEndpoint) StateFields() []string {
	return []string{
		"baseEndpoint",
		"id",
		"idGenerator",
		"stype",
		"acceptedChan",
	}
}

func (c *connectionedEndpoint) beforeSave() {}

func (c *connectionedEndpoint) StateSave(stateSinkObject state.Sink) {
	c.beforeSave()
	var acceptedChanValue []*connectionedEndpoint = c.saveAcceptedChan()
	stateSinkObject.SaveValue(4, acceptedChanValue)
	stateSinkObject.Save(0, &c.baseEndpoint)
	stateSinkObject.Save(1, &c.id)
	stateSinkObject.Save(2, &c.idGenerator)
	stateSinkObject.Save(3, &c.stype)
}

func (c *connectionedEndpoint) afterLoad() {}

func (c *connectionedEndpoint) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &c.baseEndpoint)
	stateSourceObject.Load(1, &c.id)
	stateSourceObject.Load(2, &c.idGenerator)
	stateSourceObject.Load(3, &c.stype)
	stateSourceObject.LoadValue(4, new([]*connectionedEndpoint), func(y interface{}) { c.loadAcceptedChan(y.([]*connectionedEndpoint)) })
}

func (c *connectionlessEndpoint) StateTypeName() string {
	return "pkg/sentry/socket/unix/transport.connectionlessEndpoint"
}

func (c *connectionlessEndpoint) StateFields() []string {
	return []string{
		"baseEndpoint",
	}
}

func (c *connectionlessEndpoint) beforeSave() {}

func (c *connectionlessEndpoint) StateSave(stateSinkObject state.Sink) {
	c.beforeSave()
	stateSinkObject.Save(0, &c.baseEndpoint)
}

func (c *connectionlessEndpoint) afterLoad() {}

func (c *connectionlessEndpoint) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &c.baseEndpoint)
}

func (q *queue) StateTypeName() string {
	return "pkg/sentry/socket/unix/transport.queue"
}

func (q *queue) StateFields() []string {
	return []string{
		"queueRefs",
		"ReaderQueue",
		"WriterQueue",
		"closed",
		"unread",
		"used",
		"limit",
		"dataList",
	}
}

func (q *queue) beforeSave() {}

func (q *queue) StateSave(stateSinkObject state.Sink) {
	q.beforeSave()
	stateSinkObject.Save(0, &q.queueRefs)
	stateSinkObject.Save(1, &q.ReaderQueue)
	stateSinkObject.Save(2, &q.WriterQueue)
	stateSinkObject.Save(3, &q.closed)
	stateSinkObject.Save(4, &q.unread)
	stateSinkObject.Save(5, &q.used)
	stateSinkObject.Save(6, &q.limit)
	stateSinkObject.Save(7, &q.dataList)
}

func (q *queue) afterLoad() {}

func (q *queue) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &q.queueRefs)
	stateSourceObject.Load(1, &q.ReaderQueue)
	stateSourceObject.Load(2, &q.WriterQueue)
	stateSourceObject.Load(3, &q.closed)
	stateSourceObject.Load(4, &q.unread)
	stateSourceObject.Load(5, &q.used)
	stateSourceObject.Load(6, &q.limit)
	stateSourceObject.Load(7, &q.dataList)
}

func (q *queueRefs) StateTypeName() string {
	return "pkg/sentry/socket/unix/transport.queueRefs"
}

func (q *queueRefs) StateFields() []string {
	return []string{
		"refCount",
	}
}

func (q *queueRefs) beforeSave() {}

func (q *queueRefs) StateSave(stateSinkObject state.Sink) {
	q.beforeSave()
	stateSinkObject.Save(0, &q.refCount)
}

func (q *queueRefs) afterLoad() {}

func (q *queueRefs) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &q.refCount)
}

func (m *messageList) StateTypeName() string {
	return "pkg/sentry/socket/unix/transport.messageList"
}

func (m *messageList) StateFields() []string {
	return []string{
		"head",
		"tail",
	}
}

func (m *messageList) beforeSave() {}

func (m *messageList) StateSave(stateSinkObject state.Sink) {
	m.beforeSave()
	stateSinkObject.Save(0, &m.head)
	stateSinkObject.Save(1, &m.tail)
}

func (m *messageList) afterLoad() {}

func (m *messageList) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &m.head)
	stateSourceObject.Load(1, &m.tail)
}

func (m *messageEntry) StateTypeName() string {
	return "pkg/sentry/socket/unix/transport.messageEntry"
}

func (m *messageEntry) StateFields() []string {
	return []string{
		"next",
		"prev",
	}
}

func (m *messageEntry) beforeSave() {}

func (m *messageEntry) StateSave(stateSinkObject state.Sink) {
	m.beforeSave()
	stateSinkObject.Save(0, &m.next)
	stateSinkObject.Save(1, &m.prev)
}

func (m *messageEntry) afterLoad() {}

func (m *messageEntry) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &m.next)
	stateSourceObject.Load(1, &m.prev)
}

func (c *ControlMessages) StateTypeName() string {
	return "pkg/sentry/socket/unix/transport.ControlMessages"
}

func (c *ControlMessages) StateFields() []string {
	return []string{
		"Rights",
		"Credentials",
	}
}

func (c *ControlMessages) beforeSave() {}

func (c *ControlMessages) StateSave(stateSinkObject state.Sink) {
	c.beforeSave()
	stateSinkObject.Save(0, &c.Rights)
	stateSinkObject.Save(1, &c.Credentials)
}

func (c *ControlMessages) afterLoad() {}

func (c *ControlMessages) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &c.Rights)
	stateSourceObject.Load(1, &c.Credentials)
}

func (m *message) StateTypeName() string {
	return "pkg/sentry/socket/unix/transport.message"
}

func (m *message) StateFields() []string {
	return []string{
		"messageEntry",
		"Data",
		"Control",
		"Address",
	}
}

func (m *message) beforeSave() {}

func (m *message) StateSave(stateSinkObject state.Sink) {
	m.beforeSave()
	stateSinkObject.Save(0, &m.messageEntry)
	stateSinkObject.Save(1, &m.Data)
	stateSinkObject.Save(2, &m.Control)
	stateSinkObject.Save(3, &m.Address)
}

func (m *message) afterLoad() {}

func (m *message) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &m.messageEntry)
	stateSourceObject.Load(1, &m.Data)
	stateSourceObject.Load(2, &m.Control)
	stateSourceObject.Load(3, &m.Address)
}

func (q *queueReceiver) StateTypeName() string {
	return "pkg/sentry/socket/unix/transport.queueReceiver"
}

func (q *queueReceiver) StateFields() []string {
	return []string{
		"readQueue",
	}
}

func (q *queueReceiver) beforeSave() {}

func (q *queueReceiver) StateSave(stateSinkObject state.Sink) {
	q.beforeSave()
	stateSinkObject.Save(0, &q.readQueue)
}

func (q *queueReceiver) afterLoad() {}

func (q *queueReceiver) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &q.readQueue)
}

func (s *streamQueueReceiver) StateTypeName() string {
	return "pkg/sentry/socket/unix/transport.streamQueueReceiver"
}

func (s *streamQueueReceiver) StateFields() []string {
	return []string{
		"queueReceiver",
		"buffer",
		"control",
		"addr",
	}
}

func (s *streamQueueReceiver) beforeSave() {}

func (s *streamQueueReceiver) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
	stateSinkObject.Save(0, &s.queueReceiver)
	stateSinkObject.Save(1, &s.buffer)
	stateSinkObject.Save(2, &s.control)
	stateSinkObject.Save(3, &s.addr)
}

func (s *streamQueueReceiver) afterLoad() {}

func (s *streamQueueReceiver) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &s.queueReceiver)
	stateSourceObject.Load(1, &s.buffer)
	stateSourceObject.Load(2, &s.control)
	stateSourceObject.Load(3, &s.addr)
}

func (c *connectedEndpoint) StateTypeName() string {
	return "pkg/sentry/socket/unix/transport.connectedEndpoint"
}

func (c *connectedEndpoint) StateFields() []string {
	return []string{
		"endpoint",
		"writeQueue",
	}
}

func (c *connectedEndpoint) beforeSave() {}

func (c *connectedEndpoint) StateSave(stateSinkObject state.Sink) {
	c.beforeSave()
	stateSinkObject.Save(0, &c.endpoint)
	stateSinkObject.Save(1, &c.writeQueue)
}

func (c *connectedEndpoint) afterLoad() {}

func (c *connectedEndpoint) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &c.endpoint)
	stateSourceObject.Load(1, &c.writeQueue)
}

func (b *baseEndpoint) StateTypeName() string {
	return "pkg/sentry/socket/unix/transport.baseEndpoint"
}

func (b *baseEndpoint) StateFields() []string {
	return []string{
		"Queue",
		"passcred",
		"receiver",
		"connected",
		"path",
		"linger",
	}
}

func (b *baseEndpoint) beforeSave() {}

func (b *baseEndpoint) StateSave(stateSinkObject state.Sink) {
	b.beforeSave()
	stateSinkObject.Save(0, &b.Queue)
	stateSinkObject.Save(1, &b.passcred)
	stateSinkObject.Save(2, &b.receiver)
	stateSinkObject.Save(3, &b.connected)
	stateSinkObject.Save(4, &b.path)
	stateSinkObject.Save(5, &b.linger)
}

func (b *baseEndpoint) afterLoad() {}

func (b *baseEndpoint) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &b.Queue)
	stateSourceObject.Load(1, &b.passcred)
	stateSourceObject.Load(2, &b.receiver)
	stateSourceObject.Load(3, &b.connected)
	stateSourceObject.Load(4, &b.path)
	stateSourceObject.Load(5, &b.linger)
}

func init() {
	state.Register((*connectionedEndpoint)(nil))
	state.Register((*connectionlessEndpoint)(nil))
	state.Register((*queue)(nil))
	state.Register((*queueRefs)(nil))
	state.Register((*messageList)(nil))
	state.Register((*messageEntry)(nil))
	state.Register((*ControlMessages)(nil))
	state.Register((*message)(nil))
	state.Register((*queueReceiver)(nil))
	state.Register((*streamQueueReceiver)(nil))
	state.Register((*connectedEndpoint)(nil))
	state.Register((*baseEndpoint)(nil))
}
