// automatically generated by stateify.

package auth

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (c *Credentials) StateTypeName() string {
	return "pkg/sentry/kernel/auth.Credentials"
}

func (c *Credentials) StateFields() []string {
	return []string{
		"RealKUID",
		"EffectiveKUID",
		"SavedKUID",
		"RealKGID",
		"EffectiveKGID",
		"SavedKGID",
		"ExtraKGIDs",
		"PermittedCaps",
		"InheritableCaps",
		"EffectiveCaps",
		"BoundingCaps",
		"KeepCaps",
		"UserNamespace",
	}
}

func (c *Credentials) beforeSave() {}

func (c *Credentials) StateSave(stateSinkObject state.Sink) {
	c.beforeSave()
	stateSinkObject.Save(0, &c.RealKUID)
	stateSinkObject.Save(1, &c.EffectiveKUID)
	stateSinkObject.Save(2, &c.SavedKUID)
	stateSinkObject.Save(3, &c.RealKGID)
	stateSinkObject.Save(4, &c.EffectiveKGID)
	stateSinkObject.Save(5, &c.SavedKGID)
	stateSinkObject.Save(6, &c.ExtraKGIDs)
	stateSinkObject.Save(7, &c.PermittedCaps)
	stateSinkObject.Save(8, &c.InheritableCaps)
	stateSinkObject.Save(9, &c.EffectiveCaps)
	stateSinkObject.Save(10, &c.BoundingCaps)
	stateSinkObject.Save(11, &c.KeepCaps)
	stateSinkObject.Save(12, &c.UserNamespace)
}

func (c *Credentials) afterLoad() {}

func (c *Credentials) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &c.RealKUID)
	stateSourceObject.Load(1, &c.EffectiveKUID)
	stateSourceObject.Load(2, &c.SavedKUID)
	stateSourceObject.Load(3, &c.RealKGID)
	stateSourceObject.Load(4, &c.EffectiveKGID)
	stateSourceObject.Load(5, &c.SavedKGID)
	stateSourceObject.Load(6, &c.ExtraKGIDs)
	stateSourceObject.Load(7, &c.PermittedCaps)
	stateSourceObject.Load(8, &c.InheritableCaps)
	stateSourceObject.Load(9, &c.EffectiveCaps)
	stateSourceObject.Load(10, &c.BoundingCaps)
	stateSourceObject.Load(11, &c.KeepCaps)
	stateSourceObject.Load(12, &c.UserNamespace)
}

func (i *IDMapEntry) StateTypeName() string {
	return "pkg/sentry/kernel/auth.IDMapEntry"
}

func (i *IDMapEntry) StateFields() []string {
	return []string{
		"FirstID",
		"FirstParentID",
		"Length",
	}
}

func (i *IDMapEntry) beforeSave() {}

func (i *IDMapEntry) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
	stateSinkObject.Save(0, &i.FirstID)
	stateSinkObject.Save(1, &i.FirstParentID)
	stateSinkObject.Save(2, &i.Length)
}

func (i *IDMapEntry) afterLoad() {}

func (i *IDMapEntry) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &i.FirstID)
	stateSourceObject.Load(1, &i.FirstParentID)
	stateSourceObject.Load(2, &i.Length)
}

func (i *idMapRange) StateTypeName() string {
	return "pkg/sentry/kernel/auth.idMapRange"
}

func (i *idMapRange) StateFields() []string {
	return []string{
		"Start",
		"End",
	}
}

func (i *idMapRange) beforeSave() {}

func (i *idMapRange) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
	stateSinkObject.Save(0, &i.Start)
	stateSinkObject.Save(1, &i.End)
}

func (i *idMapRange) afterLoad() {}

func (i *idMapRange) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &i.Start)
	stateSourceObject.Load(1, &i.End)
}

func (i *idMapSet) StateTypeName() string {
	return "pkg/sentry/kernel/auth.idMapSet"
}

func (i *idMapSet) StateFields() []string {
	return []string{
		"root",
	}
}

func (i *idMapSet) beforeSave() {}

func (i *idMapSet) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
	var rootValue *idMapSegmentDataSlices = i.saveRoot()
	stateSinkObject.SaveValue(0, rootValue)
}

func (i *idMapSet) afterLoad() {}

func (i *idMapSet) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.LoadValue(0, new(*idMapSegmentDataSlices), func(y interface{}) { i.loadRoot(y.(*idMapSegmentDataSlices)) })
}

func (i *idMapnode) StateTypeName() string {
	return "pkg/sentry/kernel/auth.idMapnode"
}

func (i *idMapnode) StateFields() []string {
	return []string{
		"nrSegments",
		"parent",
		"parentIndex",
		"hasChildren",
		"maxGap",
		"keys",
		"values",
		"children",
	}
}

func (i *idMapnode) beforeSave() {}

func (i *idMapnode) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
	stateSinkObject.Save(0, &i.nrSegments)
	stateSinkObject.Save(1, &i.parent)
	stateSinkObject.Save(2, &i.parentIndex)
	stateSinkObject.Save(3, &i.hasChildren)
	stateSinkObject.Save(4, &i.maxGap)
	stateSinkObject.Save(5, &i.keys)
	stateSinkObject.Save(6, &i.values)
	stateSinkObject.Save(7, &i.children)
}

func (i *idMapnode) afterLoad() {}

func (i *idMapnode) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &i.nrSegments)
	stateSourceObject.Load(1, &i.parent)
	stateSourceObject.Load(2, &i.parentIndex)
	stateSourceObject.Load(3, &i.hasChildren)
	stateSourceObject.Load(4, &i.maxGap)
	stateSourceObject.Load(5, &i.keys)
	stateSourceObject.Load(6, &i.values)
	stateSourceObject.Load(7, &i.children)
}

func (i *idMapSegmentDataSlices) StateTypeName() string {
	return "pkg/sentry/kernel/auth.idMapSegmentDataSlices"
}

func (i *idMapSegmentDataSlices) StateFields() []string {
	return []string{
		"Start",
		"End",
		"Values",
	}
}

func (i *idMapSegmentDataSlices) beforeSave() {}

func (i *idMapSegmentDataSlices) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
	stateSinkObject.Save(0, &i.Start)
	stateSinkObject.Save(1, &i.End)
	stateSinkObject.Save(2, &i.Values)
}

func (i *idMapSegmentDataSlices) afterLoad() {}

func (i *idMapSegmentDataSlices) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &i.Start)
	stateSourceObject.Load(1, &i.End)
	stateSourceObject.Load(2, &i.Values)
}

func (u *UserNamespace) StateTypeName() string {
	return "pkg/sentry/kernel/auth.UserNamespace"
}

func (u *UserNamespace) StateFields() []string {
	return []string{
		"parent",
		"owner",
		"uidMapFromParent",
		"uidMapToParent",
		"gidMapFromParent",
		"gidMapToParent",
	}
}

func (u *UserNamespace) beforeSave() {}

func (u *UserNamespace) StateSave(stateSinkObject state.Sink) {
	u.beforeSave()
	stateSinkObject.Save(0, &u.parent)
	stateSinkObject.Save(1, &u.owner)
	stateSinkObject.Save(2, &u.uidMapFromParent)
	stateSinkObject.Save(3, &u.uidMapToParent)
	stateSinkObject.Save(4, &u.gidMapFromParent)
	stateSinkObject.Save(5, &u.gidMapToParent)
}

func (u *UserNamespace) afterLoad() {}

func (u *UserNamespace) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &u.parent)
	stateSourceObject.Load(1, &u.owner)
	stateSourceObject.Load(2, &u.uidMapFromParent)
	stateSourceObject.Load(3, &u.uidMapToParent)
	stateSourceObject.Load(4, &u.gidMapFromParent)
	stateSourceObject.Load(5, &u.gidMapToParent)
}

func init() {
	state.Register((*Credentials)(nil))
	state.Register((*IDMapEntry)(nil))
	state.Register((*idMapRange)(nil))
	state.Register((*idMapSet)(nil))
	state.Register((*idMapnode)(nil))
	state.Register((*idMapSegmentDataSlices)(nil))
	state.Register((*UserNamespace)(nil))
}
