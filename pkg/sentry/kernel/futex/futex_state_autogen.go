// automatically generated by stateify.

package futex

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (b *bucket) StateTypeName() string {
	return "pkg/sentry/kernel/futex.bucket"
}

func (b *bucket) StateFields() []string {
	return []string{}
}

func (b *bucket) beforeSave() {}

func (b *bucket) StateSave(stateSinkObject state.Sink) {
	b.beforeSave()
	if !state.IsZeroValue(&b.waiters) {
		state.Failf("waiters is %#v, expected zero", &b.waiters)
	}
}

func (b *bucket) afterLoad() {}

func (b *bucket) StateLoad(stateSourceObject state.Source) {
}

func (m *Manager) StateTypeName() string {
	return "pkg/sentry/kernel/futex.Manager"
}

func (m *Manager) StateFields() []string {
	return []string{
		"sharedBucket",
	}
}

func (m *Manager) beforeSave() {}

func (m *Manager) StateSave(stateSinkObject state.Sink) {
	m.beforeSave()
	if !state.IsZeroValue(&m.privateBuckets) {
		state.Failf("privateBuckets is %#v, expected zero", &m.privateBuckets)
	}
	stateSinkObject.Save(0, &m.sharedBucket)
}

func (m *Manager) afterLoad() {}

func (m *Manager) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &m.sharedBucket)
}

func (w *waiterList) StateTypeName() string {
	return "pkg/sentry/kernel/futex.waiterList"
}

func (w *waiterList) StateFields() []string {
	return []string{
		"head",
		"tail",
	}
}

func (w *waiterList) beforeSave() {}

func (w *waiterList) StateSave(stateSinkObject state.Sink) {
	w.beforeSave()
	stateSinkObject.Save(0, &w.head)
	stateSinkObject.Save(1, &w.tail)
}

func (w *waiterList) afterLoad() {}

func (w *waiterList) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &w.head)
	stateSourceObject.Load(1, &w.tail)
}

func (w *waiterEntry) StateTypeName() string {
	return "pkg/sentry/kernel/futex.waiterEntry"
}

func (w *waiterEntry) StateFields() []string {
	return []string{
		"next",
		"prev",
	}
}

func (w *waiterEntry) beforeSave() {}

func (w *waiterEntry) StateSave(stateSinkObject state.Sink) {
	w.beforeSave()
	stateSinkObject.Save(0, &w.next)
	stateSinkObject.Save(1, &w.prev)
}

func (w *waiterEntry) afterLoad() {}

func (w *waiterEntry) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &w.next)
	stateSourceObject.Load(1, &w.prev)
}

func init() {
	state.Register((*bucket)(nil))
	state.Register((*Manager)(nil))
	state.Register((*waiterList)(nil))
	state.Register((*waiterEntry)(nil))
}
